{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs26 \cf0 In this project you will implement a program that plays the game Network\
against a human player or another computer program.  Network is played on an\
8-by-8 board.  There are two players, "Black" and "White."  Each player has ten\
chips of its own color to place on the board.  White moves first.\
Your job is to implement a MachinePlayer class that plays Network well.  One\
subtask is to write a method that identifies legal moves; another subtask is to\
write a method that finds a move that is likely to win the game.\
\
The MachinePlayer class is in the player package and extends the abstract\
Player class, which defines the following methods.\
\
  // Returns a new move by "this" player.  Internally records the move (updates\
  // the internal game board) as a move by "this" player.\
  public Move chooseMove();\
\
  // If the Move m is legal, records the move as a move by the opponent\
  // (updates the internal game board) and returns true.  If the move is\
  // illegal, returns false without modifying the internal state of "this"\
  // player.  This method allows your opponents to inform you of their moves.\
  public boolean opponentMove(Move m);\
\
  // If the Move m is legal, records the move as a move by "this" player\
  // (updates the internal game board) and returns true.  If the move is\
  // illegal, returns false without modifying the internal state of "this"\
  // player.  This method is used to help set up "Network problems" for your\
  // player to solve.\
  public boolean forceMove(Move m);\
\
In addition to the methods above, implement two constructors for MachinePlayer.\
\
  // Creates a machine player with the given color.  Color is either 0 (black)\
  // or 1 (white).  (White has the first move.)\
  public MachinePlayer(int color)\
\
  // Creates a machine player with the given color and search depth.  Color is\
  // either 0 (black) or 1 (white).  (White has the first move.)\
  public MachinePlayer(int color, int searchDepth)\
\
As usual, do not change the signatures of any of these methods; they are your\
interface to other players.  You may add helper methods.\
\
Your MachinePlayer must record enough internal state, including the current\
board configuration, so that chooseMove() can choose a good (or at the very\
least, legal) move.  In a typical game, two players and a referee each have\
their own internal representation of the board.  If all the implementations are\
free of bugs, they all have the same idea of what the board looks like,\
although each of the three uses different data structures.  The referee keeps\
its own copy to prevent malicious or buggy players from cheating or corrupting\
the board.  If your MachinePlayer is buggy and attempts to make an illegal\
move, the referee will grant the win to your opponent}